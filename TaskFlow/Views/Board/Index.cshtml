<div class="container">
    <div class="row">
        <div class="col-md-4 col-sm-12 border" style="min-height: 100vh;" id="todo-section"
            ondrop="ondrop_handler(event)" ondragover="ondragover_handler(event)">
            <div class="h5 text-center my-3">Todo</div>
            <div class="container border-top">
                @{
                    for (int i = 0; i < 3; i++)
                    {
                        <div class="w-100" style="height: 20px;" id="droppable-div-@i" ondragover="ondragover_handler(event);"
                            ondrop="ondrop_handler(event);"></div>
                        <div class="accordion  shadow-sm" draggable="true" id="accordian-@i"
                            ondragstart="ondragstart_handler(event);">
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="heading-@i">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                        data-bs-target="#collapse-@i" aria-expanded="false" aria-controls="collapse-@i">
                                        Accordion Item @i
                                    </button>
                                </h2>
                                <div id="collapse-@i" class="accordion-collapse collapse" aria-labelledby="heading-@i"
                                    data-bs-parent="#accordion-@i">
                                    <div class="accordion-body">
                                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until
                                        the collapse plugin adds the appropriate classes that we use to style each element.
                                        These classes control the overall appearance, as well as the showing and hiding via CSS
                                        transitions. You can modify any of this with custom CSS or overriding our default
                                        variables. It's also worth noting that just about any HTML can go within the
                                        <code>.accordion-body</code>, though the transition does limit overflow.
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
        <div class="col-md-4 col-sm-12 border" style="min-height: 100vh;" id="doing-section"
            ondrop="ondrop_handler(event);" ondragover="ondragover_handler(event)">
            <div class="h5 text-center my-3">Doing</div>
            <div class="container border-top">
                @{
                    for (int i = 5; i < 10; i++)
                    {
                        <div class="w-100" style="height: 20px;" id="droppable-div-@i" ondragover="ondragover_handler(event);"
                            ondrop="ondrop_handler(event);"></div>
                        <div class="accordion  shadow-sm" draggable="true" id="accordian-@i"
                            ondragstart="ondragstart_handler(event);">
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="heading-@i">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                        data-bs-target="#collapse-@i" aria-expanded="false" aria-controls="collapse-@i">
                                        Accordion Item @i
                                    </button>
                                </h2>
                                <div id="collapse-@i" class="accordion-collapse collapse" aria-labelledby="heading-@i"
                                    data-bs-parent="#accordion-@i">
                                    <div class="accordion-body">
                                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until
                                        the collapse plugin adds the appropriate classes that we use to style each element.
                                        These classes control the overall appearance, as well as the showing and hiding via CSS
                                        transitions. You can modify any of this with custom CSS or overriding our default
                                        variables. It's also worth noting that just about any HTML can go within the
                                        <code>.accordion-body</code>, though the transition does limit overflow.
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
        <div class="col-md-4 col-sm-12 border" style="min-height: 100vh;" id="done-section"
            ondrop="ondrop_handler(event);" ondragover="ondragover_handler(event)">
            <div class="h5 text-center my-3">Done</div>
            <div class="container border-top" id="done-elements-section">
                @{
                    for (int i = 15; i < 17; i++)
                    {
                        <div class="w-100" style="height: 20px;" id="droppable-div-@i" ondragover="ondragover_handler(event);"
                            ondrop="ondrop_handler(event);"></div>
                        <div class="accordion  shadow-sm" draggable="true" id="accordian-@i"
                            ondragstart="ondragstart_handler(event);">
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="heading-@i">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                        data-bs-target="#collapse-@i" aria-expanded="false" aria-controls="collapse-@i">
                                        Accordion Item @i
                                    </button>
                                </h2>
                                <div id="collapse-@i" class="accordion-collapse collapse" aria-labelledby="heading-@i"
                                    data-bs-parent="#accordion-@i">
                                    <div class="accordion-body">
                                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until
                                        the collapse plugin adds the appropriate classes that we use to style each element.
                                        These classes control the overall appearance, as well as the showing and hiding via CSS
                                        transitions. You can modify any of this with custom CSS or overriding our default
                                        variables. It's also worth noting that just about any HTML can go within the
                                        <code>.accordion-body</code>, though the transition does limit overflow.
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

<script>
    function ondragstart_handler(event) {
        event.dataTransfer.setData("text", event.target.id);
    }
    function ondrop_handler(event) {
        event.preventDefault();
        const data = event.dataTransfer.getData("text");  // accordian-0
        let whereToMove = event.target.id;
        if (whereToMove.split("-").slice(0, 2).join("-") === "droppable-div") // droppable-div-0
        {
            event.target.insertAdjacentElement("afterend", document.getElementById(data));
            const id = data.split("-")[1];
            const dropDivToTransfer = "droppable-div-" + id;
            document.getElementById(data).insertAdjacentElement("afterend", document.getElementById(dropDivToTransfer));
        }
        // document.getElementById(whereToMove).children[1].appendChild(document.getElementById(data));
    }
    function ondragover_handler(event) {
        event.preventDefault();
    }
</script>